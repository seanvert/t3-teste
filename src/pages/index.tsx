import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { useEffect, useState } from "react";
import { signIn, signOut, useSession } from "next-auth/react";
import { trpc } from "../utils/trpc";
import YTframe from "../components/ytframe";
import YTQueryBox from "../components/ytQueryBox"
const Home: NextPage = () => {
	const { data: videos, isLoading } = trpc.videos.getAll.useQuery();
	const postVideo = trpc.videos.postVideo.useMutation();
	const deleteVideo = trpc.videos.deleteVideo.useMutation();
	const [playingVideo, setPlayingVideo] = useState("c0hKVw1jiTk");
	const [link, setLink] = useState("");

	
	function handleClick() {
		setPlayingVideo("QxyqR4yh1GI");
	}

	useEffect(() => {
	}, [playingVideo]);

	return (
		<>
			<Head>
				<title>Create T3 App</title>
				<meta name="description" content="Generated by create-t3-app" />
				<link rel="icon" href="/favicon.ico" />
			</Head>
			<main className="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]">
				<div
					className="navbar"
				>
					<AuthShowcase />
				</div>
				<div className="flex flex-row">
					<YTframe videoId={playingVideo} />
					<div className="text-3xl">
						{videos?.map((vid, index) => {
							function handleDeleteVideo () {
								deleteVideo.mutate({
									id: vid.id
								})
							}
							return (
								<div key={vid.id}>
									<button
										className="btn-primary btn-sm btn-circle"
										onClick={handleDeleteVideo}>
										delete
									</button>
									<a href={vid.link}>{vid.name}</a>
								</div>
							);
						})}
					</div>
				</div>
				<YTQueryBox />
				<button
					className="text-5xl"
					onClick={handleClick}
				>
					salva db
				</button>
				<div className="container flex flex-col items-center justify-center gap-12 px-4 py-16 ">

					<div className="flex flex-col items-center gap-2">
						<div className="text-2xl text-white">

						</div>

					</div>
				</div>
			</main>
		</>
	);
};

export default Home;

const AuthShowcase: React.FC = () => {
	const { data: sessionData, status } = useSession();

	const { data: secretMessage } = trpc.auth.getSecretMessage.useQuery(
		undefined, // no input
		{ enabled: sessionData?.user !== undefined },
	);

	return (
		<div className="flex flex-row items-center justify-center gap-4">

				{sessionData && <span>{sessionData.user?.name}</span>}
			{sessionData && <img alt=""
			className="rounded-full w-12"
								 src={sessionData.user?.image}/>}

			<button
				className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
				onClick={sessionData ? () => signOut() : () => signIn() }
			>
				{sessionData ? "Sign out" : "Sign in"}
			</button>
		</div>
	);
};
