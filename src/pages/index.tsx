import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { useEffect, useState, useRef } from "react";
import { signIn, signOut, useSession } from "next-auth/react";
import { trpc } from "../utils/trpc";
import YTframe from "../components/ytframe";
import YTQueryBox from "../components/ytQueryBox"

function getIDFromYTURL (url: String) {
	var regExp = /^.*(youtu\.be\/|v\/|u\/\w\/|embed\/|watch\?v=|\&v=)([^#\&\?]*).*/;
	var match = url.match(regExp);
	if (match && match[2].length == 11) {
		return match[2];
	} else {
		//error
		console.log("url invÃ¡lida");
	}
}

const Home: NextPage = () => {
	const [queryYT, setQueryYT] = useState("");
	const {data: ytQueryResponseData, refetch: refetchYT} = trpc.yt.queryYTVideos.useQuery({
		query: queryYT
	});
	const { data: videos, isLoading, refetch } = trpc.videos.getAll.useQuery();
	const deleteVideo = trpc.videos.deleteVideo.useMutation();
	const playVideo = trpc.videos.playVideo.useMutation();
	const [playerState, setPlayerState] = useState(-1);
	const [videoIndex, setVideoIndex] = useState(0);
	const [videoPlayer, setVideoPlayer] = useState();
	const [playerUpdated, setPlayerUpdated] = useState(false);
	const [mute, setMute] = useState(true);

	function toggleSound() {
        if (mute) {
            videoPlayer.current.unMute();
        } else {
            videoPlayer.current.mute();
        }
        setMute(!mute);
      }
	
	useEffect(() => {
		/* if the player is paused, it resets player state */
		if (playerState === 2) {
			setPlayerUpdated(false);
		}
		
		if (videos) {
			/* started playing */
			if (playerState === 1) {

				/* checks if the video has started */
				if (videos[0].started && !playerUpdated) {
					/* jumps to current position */
					/* gets startedPlayingAt */
					/* and compares it with now */
					var videoTime = Date.now() - videos[0].startedPlayingAt;
					videoTime = videoTime / 1000;
					/* send it to player */
					videoPlayer.current.seekTo(videoTime);
					setPlayerUpdated(true)
				} else if (videos[0].started === false) {
					/* video hasn't started */
					/* sends starting time to api */
					/* changes video state to started */
					playVideo.mutate({
						id: videos[0].id,
						startedPlayingAt: Date.now(),
					})
				}
			}

			/* video player finished playing */
			if (playerState === 0 && videos[videoIndex+1]) {
				/* increment videos index */
				setVideoIndex(videoIndex+1);
				/* play next video */
				videoPlayer.current.loadVideoById({
					videoId: videos[videoIndex+1].ytID,
				});
				/* delete previous video */
				deleteVideo.mutate({
					id: videos[videoIndex].id
				});
				/* TODO checks if it was successful */
				/* TODO resets queue index */
				refetch();
			} else if (playerState === 0 && videos[videoIndex]) {
				deleteVideo.mutate({
					id: videos[videoIndex].id
				});
				refetch();
			}
		}

	}, [JSON.stringify(videos), playerState, videoPlayer, isLoading]);

	
	function teste () {
		/* (() => setQueryYT("emacs conference"));
		   refetch()
		   console.log("query", ytQueryResponseData); */
		/* console.log(isLoading);
		   console.log(videos); */
	}

	function handleVolume (e) {
		videoPlayer.current.setVolume(e.target.value)
	}
	
	return (
		<>
			<Head>
				<title>dr34m Radio</title>
				<meta name="description" content="Generated by create-t3-app" />
				<link rel="icon" href="/favicon.ico" />
			</Head>
			<main className="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#000000]" >
				<div
					className="navbar rounded-full py-0 px-10 bg-base-100 text-white"
				>
					<div
						className="navbar-start"
					>
						<button

							onClick={teste} >
							dr34m Radio
						</button>
					</div>

					<div className="navbar-center" >
						<YTQueryBox />
					</div>
					<div className="navbar-end">
						<AuthShowcase  />
					</div>
				</div>
				<div className="flex flex-row grow justify-items-center items-center">
					{(isLoading
					|| typeof(videos) === "undefined"
					|| videos.length === 0
					) ?
					 <div className="radial-progress" style={{"--value":100}}>100%</div>
					:
					 <div className="video indicator">
						 <div
							 className="w-full h-full absolute flex"

						 >
							 <div>
								 ladoesquerdo
								 <input
								 onChange={(e) => handleVolume(e)}
									 type="range" min="0" max="100"
									 className="range" />
							 </div>
							 <div className="grow"
								  onClick={toggleSound}
							 >
								 
							 </div>
							 <div className="absolute inset-1/2">
								 {mute ? <AudioOffIcon /> : null}
							 </div>
							 lado direito
							 <Playlist videos={videos}
							 deleteVideo={deleteVideo} />
						 </div>
						 <YTframe
							 stateFunction={setPlayerState}
							 setPlayerFunction={setVideoPlayer}
							 videoId={videos[0].ytID} />
					 </div>
					}
					

				</div>

			</main>
		</>
	);
};

export default Home;

function Playlist({videos, deleteVideo}) {
	const [visible, setVisibility] = useState(false);
	const playlist = useRef(null);
	const [mouseY, setMouseY] = useState(0);
	const [placed, setPlaced] = useState(false);
	function handleMouseEnter () {
		setVisibility(true);
	}
	
	function handleMouseLeave () {
		setVisibility(false);
		setPlaced(false);
	}

	function setMousePos(event) {
		setMouseY(event.clientY);
	}

	document.addEventListener("mousemove", setMousePos);
	useEffect(() => {
		if (visible && !placed) {
			playlist.current.style.top = mouseY - 130 + "px";
			setPlaced(true);
		}

	}, [visible]);

	


	if (visible) {

		return (
			<div
				id="videoPlaylist"
				ref={playlist}
				onMouseLeave={handleMouseLeave}
				className="w-1/4 absolute right-0 top-0">
				<div className="h-8">
					Playlist
				</div>
				<div className="text-l text-white
					bg-black/70">
					{videos?.map((vid, index: number) => {
						return <VideoPlaylistItem
						video={vid}
								   deleteVideo={deleteVideo} />
					})}
				</div>
				<div>
				</div>
			</div>
		);
	} else {
		return (
			<div
				className="w-10"
				onMouseEnter={handleMouseEnter}
			>
				
			</div>
		);
	}
}

function VideoPlaylistItem ({ video, deleteVideo }) {
	function handleDeleteVideo () {
		deleteVideo.mutate({
			id: video.id,
		})
	}
	
	return (
		<div

			className="py-2 px-2 hover:bg-white hover:text-black
			hover:transition hover:duration-200 hover:ease-in-out"
			key={video.id}>
			<button
				className="btn-primary btn-sm btn-circle"
				onClick={handleDeleteVideo}>
				delete
			</button>
			<a className="px-3"
				href={video.link}>{video.name}</a>
		</div>
	);
}

const AuthShowcase: React.FC = () => {
	const { data: sessionData, status } = useSession();

	const { data: secretMessage } = trpc.auth.getSecretMessage.useQuery(
		undefined, // no input
		{ enabled: sessionData?.user !== undefined },
	);

	return (

		<div className="flex flex-row items-center justify-center gap-4">
			{sessionData && <span>{sessionData.user?.name}</span>}
			<div className="avatar dropdown dropdown-bottom dropdown-end">
				<div tabIndex={0} className="w-12 rounded-full">
					{sessionData ? <img alt="" src={sessionData.user?.image}/>: <button
className="rounded-full">
						Sign in
					</button>}
				</div>
				<ul tabIndex={0} className="dropdown-content menu rounded-box">
					<li>
						<button
							className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
							onClick={sessionData ? () => signOut() : () => signIn() }
						>
							{sessionData ? "Sign out" : "Sign in"}
						</button>
					</li>
				</ul>
			</div>


		</div>
	);
};

function AudioOnIcon () {
	return (
		<svg className="swap-on fill-current" xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 24 24"><path d="M14,3.23V5.29C16.89,6.15 19,8.83 19,12C19,15.17 16.89,17.84 14,18.7V20.77C18,19.86 21,16.28 21,12C21,7.72 18,4.14 14,3.23M16.5,12C16.5,10.23 15.5,8.71 14,7.97V16C15.5,15.29 16.5,13.76 16.5,12M3,9V15H7L12,20V4L7,9H3Z" /></svg>
	);
}

function AudioOffIcon () {
	return (
		<svg className="swap-off fill-current" xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 24 24"><path d="M3,9H7L12,4V20L7,15H3V9M16.59,12L14,9.41L15.41,8L18,10.59L20.59,8L22,9.41L19.41,12L22,14.59L20.59,16L18,13.41L15.41,16L14,14.59L16.59,12Z" /></svg>
	);
}
