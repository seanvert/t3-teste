import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { useEffect, useState } from "react";
import { signIn, signOut, useSession } from "next-auth/react";
import { trpc } from "../utils/trpc";
import YTframe from "../components/ytframe";
import YTQueryBox from "../components/ytQueryBox"

function getIDFromYTURL (url: String) {
	var regExp = /^.*(youtu\.be\/|v\/|u\/\w\/|embed\/|watch\?v=|\&v=)([^#\&\?]*).*/;
	var match = url.match(regExp);
	if (match && match[2].length == 11) {
		return match[2];
	} else {
		//error
		console.log("url invÃ¡lida");
	}
}

const Home: NextPage = () => {
	const ytQuery = trpc.yt.queryYTVideos.useQuery({
		query: "testes testes mais testes"
	});
	const { data: videos, isLoading, refetch } = trpc.videos.getAll.useQuery();
	const postVideo = trpc.videos.postVideo.useMutation();
	const deleteVideo = trpc.videos.deleteVideo.useMutation();
	const playVideo = trpc.videos.playVideo.useMutation();
	const [playerState, setPlayerState] = useState(-1);
	const [videoIndex, setVideoIndex] = useState(0);
	const [videoPlayer, setVideoPlayer] = useState();
	const [playerUpdated, setPlayerUpdated] = useState(false);

	
	useEffect(() => {
		/* if the player is paused, it resets player state */
		if (playerState === 2) {
			setPlayerUpdated(false);
		}
		
		if (videos) {
			/* started playing */
			if (playerState === 1) {
				/* checks if the video has started */
				if (videos[0].started && !playerUpdated) {
					/* jumps to current position */
					/* gets startedPlayingAt */
					/* and compares it with now */
					var videoTime = Date.now() - videos[0].startedPlayingAt;
					videoTime = videoTime / 1000;
					/* send it to player */
					videoPlayer.current.seekTo(videoTime);
					setPlayerUpdated(true)
				} else if (videos[0].started === false) {
					/* video hasn't started */
					/* sends starting time to api */
					/* changes video state to started */
					playVideo.mutate({
						id: videos[0].id,
						startedPlayingAt: Date.now(),
					})
				}
			}

			/* video player finished playing */
			if (playerState === 0 && videos[videoIndex+1]) {
				/* increment videos index */
				setVideoIndex(videoIndex+1);
				/* play next video */
				videoPlayer.current.loadVideoById({
					videoId: videos[videoIndex+1].ytID,
				});
				/* delete previous video */
				deleteVideo.mutate({
					id: videos[videoIndex].id
				});
				/* TODO checks if it was successful */
				/* TODO resets queue index */
				refetch();
			} else if (playerState === 0 && videos[videoIndex]) {
				deleteVideo.mutate({
					id: videos[videoIndex].id
				});
				refetch();
			}
		}

	}, [JSON.stringify(videos), playerState, videoPlayer, isLoading]);

	function teste () {

		console.log(isLoading);
		console.log(videos);
		videoPlayer.current.seekTo(10);
	}

	return (
		<>
			<Head>
				<title>Create T3 App</title>
				<meta name="description" content="Generated by create-t3-app" />
				<link rel="icon" href="/favicon.ico" />
			</Head>
			<main className="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#ffffff]">
				<div
					className="navbar text-white"
				>
					<AuthShowcase />
					<button onClick={teste}>
						testes
					</button>
				</div>
				<div className="flex flex-row grow justify-items-center items-center">
					{(isLoading
						|| typeof(videos) === "undefined"
						|| videos.length === 0
					) ?
					 <div className="radial-progress" style={{"--value":100}}>100%</div>
					:
					 <YTframe
					 stateFunction={setPlayerState}
					 setPlayerFunction={setVideoPlayer}
						 videoId={videos[0].ytID} />
					}
					
					<div className="text-3xl text-white">
						{videos?.map((vid, index) => {
							function handleDeleteVideo () {
								deleteVideo.mutate({
									id: vid.id
								})
							}
							return (
								<div key={vid.id}>
									<button
										className="btn-primary btn-sm btn-circle"
										onClick={handleDeleteVideo}>
										delete
									</button>
									<a href={vid.link}>{vid.name}</a>
								</div>
							);
						})}
					</div>
				</div>
				<YTQueryBox />
			</main>
		</>
	);
};

export default Home;

const AuthShowcase: React.FC = () => {
	const { data: sessionData, status } = useSession();

	const { data: secretMessage } = trpc.auth.getSecretMessage.useQuery(
		undefined, // no input
		{ enabled: sessionData?.user !== undefined },
	);

	return (

		<div className="flex flex-row items-center justify-center gap-4">

				{sessionData && <span>{sessionData.user?.name}</span>}
					<div className="avatar">
  <div className="w-12 rounded-full">
			{sessionData && <img alt="" src={sessionData.user?.image}/>}
  </div>
</div>

			<button
				className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
				onClick={sessionData ? () => signOut() : () => signIn() }
			>
				{sessionData ? "Sign out" : "Sign in"}
			</button>
		</div>
	);
};
