import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { useEffect, useState } from "react";
import { signIn, signOut, useSession } from "next-auth/react";
import { trpc } from "../utils/trpc";
import YTframe from "../components/ytframe";
import YTQueryBox from "../components/ytQueryBox"

function getIDFromYTURL (url) {
	var regExp = /^.*(youtu\.be\/|v\/|u\/\w\/|embed\/|watch\?v=|\&v=)([^#\&\?]*).*/;
	var match = url.match(regExp);
	if (match && match[2].length == 11) {
		return match[2];
	} else {
		//error
		console.log("url inválida");
	}
}

const Home: NextPage = () => {
	const { data: videos, isLoading } = trpc.videos.getAll.useQuery();
	const postVideo = trpc.videos.postVideo.useMutation();
	const deleteVideo = trpc.videos.deleteVideo.useMutation();
	const [playerState, setPlayerState] = useState(-1);
	const [videoIndex, setVideoIndex] = useState(0);
	const [videoPlayer, setVideoPlayer] = useState();

	
	useEffect(() => {
		if (videos && playerState === 0) {
			setVideoIndex(videoIndex+1);
			videoPlayer.current.loadVideoById({
				videoId: getIDFromYTURL(videos[videoIndex+1].link),
			});
		}
		// quando isso daqui for 0
		// passa o vídeo index 1 pra tocar
		// apaga o video 0
	}, [videos, playerState]);

	return (
		<>
			<Head>
				<title>Create T3 App</title>
				<meta name="description" content="Generated by create-t3-app" />
				<link rel="icon" href="/favicon.ico" />
			</Head>
			<main className="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]">
				<div
					className="navbar text-white"
				>
					<AuthShowcase />
				</div>
				<div className="flex flex-row">
					{isLoading ? "AAAAAAA" : <YTframe
					stateFunction={setPlayerState}
					setPlayerFunction={setVideoPlayer}
												 videoId={getIDFromYTURL(videos[videoIndex].link)} />}
					
					<div className="text-3xl">
						{videos?.map((vid, index) => {
							function handleDeleteVideo () {
								deleteVideo.mutate({
									id: vid.id
								})
							}
							return (
								<div key={vid.id}>
									<button
										className="btn-primary btn-sm btn-circle"
										onClick={handleDeleteVideo}>
										delete
									</button>
									<a href={vid.link}>{vid.name}</a>
								</div>
							);
						})}
					</div>
				</div>
				<YTQueryBox />
			</main>
		</>
	);
};

export default Home;

const AuthShowcase: React.FC = () => {
	const { data: sessionData, status } = useSession();

	const { data: secretMessage } = trpc.auth.getSecretMessage.useQuery(
		undefined, // no input
		{ enabled: sessionData?.user !== undefined },
	);

	return (

		<div className="flex flex-row items-center justify-center gap-4">

				{sessionData && <span>{sessionData.user?.name}</span>}
					<div className="avatar">
  <div className="w-12 rounded-full">
			{sessionData && <img alt="" src={sessionData.user?.image}/>}
  </div>
</div>

			<button
				className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
				onClick={sessionData ? () => signOut() : () => signIn() }
			>
				{sessionData ? "Sign out" : "Sign in"}
			</button>
		</div>
	);
};
